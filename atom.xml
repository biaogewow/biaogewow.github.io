<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-04-24T06:40:02.715Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>jiangBiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jQuery中的隐式迭代--each()用法</title>
    <link href="http://yoursite.com/2016/04/24/each/"/>
    <id>http://yoursite.com/2016/04/24/each/</id>
    <published>2016-04-24T03:30:04.000Z</published>
    <updated>2016-04-24T06:40:02.715Z</updated>
    
    <content type="html">&lt;h3 id=&quot;隐式迭代-只关注迭代的开始和结束-不关注迭代过程&quot;&gt;&lt;a href=&quot;#隐式迭代-只关注迭代的开始和结束-不关注迭代过程&quot; class=&quot;headerlink&quot; title=&quot;隐式迭代 - 只关注迭代的开始和结束,不关注迭代过程&quot;&gt;&lt;/a&gt;隐式迭代 - 只关注迭代的开始和结束,不关注迭代过程&lt;/h3&gt;&lt;h4 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方法&quot;&gt;&lt;/a&gt;方法&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;$(selector).each(callback) (jQuery)对象方法&lt;/li&gt;
&lt;li&gt;$.each(obj,callback) (jQuery)全局函数&lt;ul&gt;
&lt;li&gt;callback 回调函数,function(index,domEle){}&lt;/li&gt;
&lt;li&gt;index 遍历过程中的索引值    &lt;/li&gt;
&lt;li&gt;domEle 遍历得到的每个DOM对象(元素)&lt;/li&gt;
&lt;li&gt;obj 需要遍历的对象或数组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;$(&amp;quot;ul&amp;gt;li&amp;quot;).each(function(index,domEle){
        if(index%2==0){
        domEle.style.backgroundColor=&amp;quot;skyblue&amp;quot;;
        }
    })

将li中索引值为偶数的颜色变为天蓝（偶数从0开始）
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;隐式迭代-只关注迭代的开始和结束-不关注迭代过程&quot;&gt;&lt;a href=&quot;#隐式迭代-只关注迭代的开始和结束-不关注迭代过程&quot; class=&quot;headerlink&quot; title=&quot;隐式迭代 - 只关注迭代的开始和结束,不关注迭代过程&quot;&gt;&lt;/a&gt;隐式迭代 - 只关注迭代
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ready()与onload的区别</title>
    <link href="http://yoursite.com/2016/04/15/ready/"/>
    <id>http://yoursite.com/2016/04/15/ready/</id>
    <published>2016-04-15T14:12:38.586Z</published>
    <updated>2016-04-24T06:33:40.256Z</updated>
    
    <content type="html">&lt;h3 id=&quot;1-onload没有简写形式-ready具有简写形式，简写形式如下&quot;&gt;&lt;a href=&quot;#1-onload没有简写形式-ready具有简写形式，简写形式如下&quot; class=&quot;headerlink&quot; title=&quot;1.onload没有简写形式,ready具有简写形式，简写形式如下:&quot;&gt;&lt;/a&gt;1.onload没有简写形式,ready具有简写形式，简写形式如下:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;$(document).ready(function(){})   
$().ready(function(){}) 
$(function(){})
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-nbsp-onload必须等待HTML页面中所有内部都加载完毕后才执行；ready是等待DOM节点树的内容加载完毕后就执行&quot;&gt;&lt;a href=&quot;#2-nbsp-onload必须等待HTML页面中所有内部都加载完毕后才执行；ready是等待DOM节点树的内容加载完毕后就执行&quot; class=&quot;headerlink&quot; title=&quot;2.&amp;nbsp;onload必须等待HTML页面中所有内部都加载完毕后才执行；ready是等待DOM节点树的内容加载完毕后就执行&quot;&gt;&lt;/a&gt;2.&amp;nbsp;onload必须等待HTML页面中所有内部都加载完毕后才执行；ready是等待DOM节点树的内容加载完毕后就执行&lt;/h3&gt;&lt;h3 id=&quot;3-nbsp-一个HTML页面只能编写一个onload；但是一个HTML页面允许编写多个ready&quot;&gt;&lt;a href=&quot;#3-nbsp-一个HTML页面只能编写一个onload；但是一个HTML页面允许编写多个ready&quot; class=&quot;headerlink&quot; title=&quot;3.&amp;nbsp;一个HTML页面只能编写一个onload；但是一个HTML页面允许编写多个ready&quot;&gt;&lt;/a&gt;3.&amp;nbsp;一个HTML页面只能编写一个onload；但是一个HTML页面允许编写多个ready&lt;/h3&gt;&lt;h3 id=&quot;注：可以利用此制作页面加载转圈效果&quot;&gt;&lt;a href=&quot;#注：可以利用此制作页面加载转圈效果&quot; class=&quot;headerlink&quot; title=&quot;注：可以利用此制作页面加载转圈效果&quot;&gt;&lt;/a&gt;注：可以利用此制作页面加载转圈效果&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-onload没有简写形式-ready具有简写形式，简写形式如下&quot;&gt;&lt;a href=&quot;#1-onload没有简写形式-ready具有简写形式，简写形式如下&quot; class=&quot;headerlink&quot; title=&quot;1.onload没有简写形式,ready具有简写形式
    
    </summary>
    
    
  </entry>
  
</feed>
